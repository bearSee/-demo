require("core-js/modules/esnext.global-this.js");

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["@babel/runtime/helpers/classCallCheck", "@babel/runtime/helpers/createClass", "core-js/modules/es.array.includes.js", "core-js/modules/es.string.includes.js", "core-js/modules/es.regexp.exec.js", "core-js/modules/es.string.split.js", "core-js/modules/es.array.concat.js", "core-js/modules/es.string.replace.js", "core-js/modules/es.number.to-fixed.js", "core-js/modules/es.number.constructor.js", "core-js/modules/es.object.assign.js", "core-js/modules/es.array.join.js", "core-js/modules/es.array.find.js", "core-js/modules/es.object.to-string.js", "core-js/modules/es.array.splice.js", "core-js/modules/es.array.map.js", "core-js/modules/web.dom-collections.for-each.js", "core-js/modules/es.array.fill.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(require("@babel/runtime/helpers/classCallCheck"), require("@babel/runtime/helpers/createClass"), require("core-js/modules/es.array.includes.js"), require("core-js/modules/es.string.includes.js"), require("core-js/modules/es.regexp.exec.js"), require("core-js/modules/es.string.split.js"), require("core-js/modules/es.array.concat.js"), require("core-js/modules/es.string.replace.js"), require("core-js/modules/es.number.to-fixed.js"), require("core-js/modules/es.number.constructor.js"), require("core-js/modules/es.object.assign.js"), require("core-js/modules/es.array.join.js"), require("core-js/modules/es.array.find.js"), require("core-js/modules/es.object.to-string.js"), require("core-js/modules/es.array.splice.js"), require("core-js/modules/es.array.map.js"), require("core-js/modules/web.dom-collections.for-each.js"), require("core-js/modules/es.array.fill.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.classCallCheck, global.createClass, global.esArrayIncludes, global.esStringIncludes, global.esRegexpExec, global.esStringSplit, global.esArrayConcat, global.esStringReplace, global.esNumberToFixed, global.esNumberConstructor, global.esObjectAssign, global.esArrayJoin, global.esArrayFind, global.esObjectToString, global.esArraySplice, global.esArrayMap, global.webDomCollectionsForEach, global.esArrayFill);
    global.main = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_classCallCheck2, _createClass2, _esArrayIncludes, _esStringIncludes, _esRegexpExec, _esStringSplit, _esArrayConcat, _esStringReplace, _esNumberToFixed, _esNumberConstructor, _esObjectAssign, _esArrayJoin, _esArrayFind, _esObjectToString, _esArraySplice, _esArrayMap, _webDomCollectionsForEach, _esArrayFill) {
  "use strict";

  var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

  _classCallCheck2 = _interopRequireDefault(_classCallCheck2);
  _createClass2 = _interopRequireDefault(_createClass2);

  // 数值计算精度处理
  var repairAccuracy = function repairAccuracy(number) {
    var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
    // 去除小数点后无意义的0
    var reg = /(?:\.0*|(\.\d+?)0+)$/; // 值为科学计数法的值时

    if (String(number).includes('e')) {
      var numberStrArr = String(number).split('e'); // 值总长度超过10个长度时，则将科学计数法展示的值只保留6位有效小数位

      if (numberStrArr[0].length > 10) return "".concat(Number(numberStrArr[0]).toFixed(6).replace(reg, '$1'), "e").concat(numberStrArr[1]); // 值总长度不超过10个长度时，则将科学计数法展示的值直接返回

      return String(number);
    } // number为常规值时，过滤小数点后无意义的0


    return number.toFixed(precision).replace(reg, '$1');
  };

  var Calculator = /*#__PURE__*/function () {
    function Calculator($el, config) {
      var _this = this;

      (0, _classCallCheck2.default)(this, Calculator);

      var _ref = config || {},
          _ref$copyValue = _ref.copyValue,
          copyValue = _ref$copyValue === void 0 ? true : _ref$copyValue,
          _ref$showHistory = _ref.showHistory,
          showHistory = _ref$showHistory === void 0 ? true : _ref$showHistory,
          computeFinish = _ref.computeFinish,
          chooseResult = _ref.chooseResult,
          chooseNumber = _ref.chooseNumber;

      Object.assign(this, {
        $el: typeof $el === 'string' ? document && document.getElementById($el) || null : $el,
        copyValue: copyValue,
        showHistory: showHistory,
        computeFinish: typeof computeFinish === 'function' ? computeFinish : function () {},
        chooseResult: typeof chooseResult === 'function' ? chooseResult : function () {},
        chooseNumber: typeof chooseNumber === 'function' ? chooseNumber : function () {},
        // 按键配置
        operationSymbols: [{
          symbol: '%',
          class: 'operation mini-font',
          operate: function operate() {
            var currentResult = Number(_this.currentResult) || 0;
            _this.currentResult = "".concat(repairAccuracy(currentResult / 100, 11)); // 更新计算结果展示

            _this.updateResultString();

            var lastProcessString = _this.lastSymbolObject ? "".concat(_this.lastResult || '', " ").concat(_this.lastSymbolObject.symbol || '') : '';

            _this.handlerCompute(function () {
              // 更新计算过程展示
              _this.updateProcessString(lastProcessString ? "".concat(lastProcessString, " (").concat(currentResult, " \xF7 100)") : "".concat(currentResult, " \xF7 100"));
            });

            _this.isFinishComputed = true;

            _this.handlerStorageProcessNum(currentResult);

            _this.handlerStorageResultNum(_this.currentResult);

            _this.computeFinish(Number(_this.currentResult));
          }
        }, {
          symbol: 'CE',
          class: 'operation mini-font',
          operate: function operate() {
            if (_this.isFinishComputed) {
              _this.lastResult = '';
              _this.lastSymbolObject = null; // 更新计算过程展示

              _this.updateProcessString('');
            }

            _this.currentResult = '0'; // 更新计算结果展示

            _this.updateResultString();

            _this.computeFinish(Number(_this.currentResult));
          }
        }, {
          symbol: 'C',
          class: 'operation mini-font',
          operate: function operate() {
            _this.lastResult = '';
            _this.currentResult = '0';
            _this.lastSymbolObject = null; // 更新计算结果展示

            _this.updateResultString(); // 更新计算过程展示


            _this.updateProcessString('');

            _this.computeFinish(Number(_this.currentResult));
          }
        }, {
          symbol: '',
          class: 'operation',
          render: "<div class=\"symbol-backspace\">\n                        <div class=\"backspace-icon-l\"></div>\n                        <div class=\"backspace-icon-r\">x</div>\n                    </div>",
          operate: function operate() {
            var res = String(_this.currentResult).split('');
            res.pop();

            if (!res.length || res.length === 1 && res[0] === '-' || _this.isComputing || _this.isFinishComputed) {
              _this.currentResult = '0'; // 更新计算结果展示

              _this.updateResultString(); // 更新计算过程展示


              if (_this.isFinishComputed) _this.updateProcessString('');
              return;
            }

            _this.currentResult = res.join(''); // 更新计算结果展示

            _this.updateResultString();

            _this.computeFinish(Number(_this.currentResult));
          }
        }, {
          symbol: '¹/x',
          class: 'operation mini-font',
          operate: function operate() {
            var currentResult = Number(_this.currentResult) || 0;

            if (currentResult === 0) {
              _this.switchErrorDialogShow(true);

              return;
            }

            _this.currentResult = "".concat(repairAccuracy(1 / currentResult, 11));
            var lastProcessString = _this.lastSymbolObject ? "".concat(_this.lastResult || '', " ").concat(_this.lastSymbolObject.symbol || '') : '';

            _this.handlerCompute(function () {
              // 更新计算过程展示
              _this.updateProcessString(lastProcessString ? "".concat(lastProcessString, " (1 \xF7 ").concat(currentResult, ")") : "1 \xF7 ".concat(currentResult));
            });

            _this.isFinishComputed = true;

            _this.handlerStorageProcessNum(currentResult);

            _this.handlerStorageResultNum(_this.currentResult); // 更新计算结果展示


            _this.updateResultString();

            _this.computeFinish(Number(_this.currentResult));
          }
        }, {
          symbol: 'x²',
          class: 'operation mini-font',
          operate: function operate() {
            var currentResult = Number(_this.currentResult) || 0;
            _this.currentResult = "".concat(repairAccuracy(Math.pow(currentResult, 2), 11));
            var lastProcessString = _this.lastSymbolObject ? "".concat(_this.lastResult || '', " ").concat(_this.lastSymbolObject.symbol || '') : '';

            _this.handlerCompute(function () {
              // 更新计算过程展示
              _this.updateProcessString("".concat(lastProcessString, " ").concat(currentResult, "\xB2"));
            });

            _this.isFinishComputed = true;

            _this.handlerStorageProcessNum(currentResult);

            _this.handlerStorageResultNum(_this.currentResult); // 更新计算结果展示


            _this.updateResultString();

            _this.computeFinish(Number(_this.currentResult));
          }
        }, {
          symbol: '²√x',
          class: 'operation mini-font',
          operate: function operate() {
            var currentResult = Number(_this.currentResult) || 0;
            _this.currentResult = "".concat(repairAccuracy(Math.sqrt(currentResult), 11));
            var lastProcessString = _this.lastSymbolObject ? "".concat(_this.lastResult || '', " ").concat(_this.lastSymbolObject.symbol || '') : '';

            _this.handlerCompute(function () {
              // 更新计算过程展示
              _this.updateProcessString("".concat(lastProcessString, " \xB2\u221A").concat(currentResult));
            });

            _this.isFinishComputed = true;

            _this.handlerStorageProcessNum(currentResult);

            _this.handlerStorageResultNum(_this.currentResult); // 更新计算结果展示


            _this.updateResultString();

            _this.computeFinish(Number(_this.currentResult));
          }
        }, {
          symbol: '÷',
          class: 'operation large-font',
          operate: function operate(obj) {
            _this.handlerOperateSymbol(obj);
          },
          asyncSymbolOperateVal: function asyncSymbolOperateVal() {
            var lastResult = Number(_this.lastResult) || 0;
            var currentResult = Number(_this.currentResult) || 0;
            if (currentResult === 0) return 'Error';
            return "".concat(repairAccuracy(lastResult / currentResult));
          }
        }, {
          symbol: '7',
          type: 'digit',
          class: 'number'
        }, {
          symbol: '8',
          type: 'digit',
          class: 'number'
        }, {
          symbol: '9',
          type: 'digit',
          class: 'number'
        }, {
          symbol: '×',
          class: 'operation large-font',
          operate: function operate(obj) {
            _this.handlerOperateSymbol(obj);
          },
          asyncSymbolOperateVal: function asyncSymbolOperateVal() {
            var lastResult = Number(_this.lastResult) || 0;
            var currentResult = Number(_this.currentResult) || 0;
            return "".concat(repairAccuracy(lastResult * currentResult));
          }
        }, {
          symbol: '4',
          type: 'digit',
          class: 'number'
        }, {
          symbol: '5',
          type: 'digit',
          class: 'number'
        }, {
          symbol: '6',
          type: 'digit',
          class: 'number'
        }, {
          symbol: '－',
          class: 'operation large-font',
          operate: function operate(obj) {
            _this.handlerOperateSymbol(obj);
          },
          asyncSymbolOperateVal: function asyncSymbolOperateVal() {
            var lastResult = Number(_this.lastResult) || 0;
            var currentResult = Number(_this.currentResult) || 0;
            return "".concat(repairAccuracy(lastResult - currentResult));
          }
        }, {
          symbol: '1',
          type: 'digit',
          class: 'number'
        }, {
          symbol: '2',
          type: 'digit',
          class: 'number'
        }, {
          symbol: '3',
          type: 'digit',
          class: 'number'
        }, {
          symbol: '＋',
          class: 'operation large-font',
          operate: function operate(obj) {
            _this.handlerOperateSymbol(obj);
          },
          asyncSymbolOperateVal: function asyncSymbolOperateVal() {
            var lastResult = Number(_this.lastResult) || 0;
            var currentResult = Number(_this.currentResult) || 0;
            return "".concat(repairAccuracy(lastResult + currentResult));
          }
        }, {
          symbol: '±',
          class: 'number font-normal',
          operate: function operate() {
            var res = Number(_this.currentResult);

            if (res) {
              _this.currentResult = String(-res); // 更新计算结果展示

              _this.updateResultString();
            }
          }
        }, {
          symbol: '0',
          type: 'digit',
          class: 'number'
        }, {
          symbol: '.',
          class: 'number',
          operate: function operate() {
            var res = "".concat(_this.isFinishComputed || _this.isComputing || _this.isShowHistory ? 0 : _this.currentResult);
            if (res.includes('.')) return;
            res = res ? "".concat(res, ".") : '0.';

            _this.opreateAfterTouchKey(res);
          }
        }, {
          symbol: '＝',
          class: 'operation large-font equal',
          operate: function operate() {
            _this.handlerCompute();

            _this.isFinishComputed = true;
          }
        }],
        // 计算过程的值列表
        processNumbers: [],
        // 计算结果的值列表
        resultNumbers: [],
        // 是否处于待计算状态，控制用户在连续点击运算符时，不会重复计算
        isComputing: false,
        // 一轮计算是否结束，控制点击数字时是否需要先清空再拼接数字
        isFinishComputed: false,
        // 当前是否为展示历史数值
        isShowHistory: false,
        // 上一个运算符对象
        lastSymbolObject: null,
        // 上一个保存的值
        lastResult: '',
        // 当前输入的值
        currentResult: '0',
        // 计算过程信息
        processString: '',
        // 展示计算过程的dom
        processStringDom: null,
        // 展示计算结果的dom
        resultStringDom: null
      });
      this.createElement();
    } // 按键触发的事件


    (0, _createClass2.default)(Calculator, [{
      key: "handlerTouchKey",
      value: function handlerTouchKey(symbol) {
        // 按数字键
        if (symbol.type === 'digit') {
          var res = "".concat(this.isComputing || this.isFinishComputed || this.isShowHistory ? '0' : this.currentResult).concat(symbol.symbol);
          var index = res.indexOf('.');

          if (index > -1 && res[index - 1] !== '0' || index < 0) {
            res = res.replace(/\b(0+)/gi, '');
          }

          this.opreateAfterTouchKey(res);
          return;
        } // 按其他键


        if (symbol.operate) symbol.operate(symbol);
      } // 按了数字键之后的操作逻辑

    }, {
      key: "opreateAfterTouchKey",
      value: function opreateAfterTouchKey(num) {
        // if (Number(num) > 999999999.99 || num.length > 16) return;
        if (num.length > 16) return;
        this.currentResult = num || '0';
        this.isComputing = false; // 按下数字键时，上一步若为完成一轮计算的状态，则改变完成状态，清除计算过程

        if (this.isFinishComputed) {
          this.isFinishComputed = false; // 更新计算过程展示

          this.updateProcessString('');
        } // 按下数字键时，上一步若为展示历史计算记录的状态，则改变完成状态，清除计算过程


        if (this.isShowHistory) {
          this.isShowHistory = false; // 更新计算过程展示

          this.updateProcessString('');
        } // 更新计算结果展示


        this.updateResultString();
      } // 操作运算符（+、-、*、/）的逻辑

    }, {
      key: "handlerOperateSymbol",
      value: function handlerOperateSymbol(obj) {
        if (!this.isComputing) this.handlerCompute();
        this.isComputing = true;
        this.isFinishComputed = false;
        this.isShowHistory = false;
        this.lastSymbolObject = obj;
        this.lastResult = this.currentResult;
        this.handlerStorageProcessNum(this.lastResult); // 更新计算过程展示

        this.updateProcessString("".concat(this.lastResult, " ").concat(obj.symbol, " "));
      } // 存储计算过程的值

    }, {
      key: "handlerStorageProcessNum",
      value: function handlerStorageProcessNum(num) {
        if (this.processNumbers.find(function (_ref2) {
          var number = _ref2.number;
          return number === String(num);
        })) return;
        this.processNumbers.unshift({
          number: String(num),
          processString: ''
        }); // 更新计算过程值和结果的列表

        this.updateProcessList();
      } // 存储计算结果的值

    }, {
      key: "handlerStorageResultNum",
      value: function handlerStorageResultNum(num) {
        if (this.resultNumbers.find(function (_ref3) {
          var number = _ref3.number;
          return number === String(num);
        })) return;
        this.resultNumbers.unshift({
          number: String(num),
          processString: this.processString
        }); // 更新计算过程值和结果的列表

        this.updateProcessList();
      } // 点击计算过程/计算结果列表的值触发的逻辑

    }, {
      key: "handlerChooseNum",
      value: function handlerChooseNum(_ref4) {
        var number = _ref4.number,
            processString = _ref4.processString;
        this.currentResult = number; // 抛出点击计算过程/计算结果列表的回调方法

        this.chooseNumber(Number(this.currentResult || 0)); // 已完成上一轮计算，点击时仅为预览之前的计算时

        if (!this.lastSymbolObject) {
          // 更新计算过程展示
          this.updateProcessString(processString);
          this.isShowHistory = true;
        }

        this.isComputing = false;
        this.updateResultString();
      } // 计算过程的逻辑

    }, {
      key: "handlerCompute",
      value: function handlerCompute(callback) {
        // 若上一个操作符对象不存在，则不计算
        if (!this.lastSymbolObject) {
          if (callback) callback();
          return;
        } // 从上一个操作符对象中获取具体计算方法


        var _this$lastSymbolObjec = this.lastSymbolObject,
            asyncSymbolOperateVal = _this$lastSymbolObjec.asyncSymbolOperateVal,
            symbol = _this$lastSymbolObjec.symbol; // 将当前展示的值记录存到临时变量

        var lastResult = this.currentResult; // 根据具体计算方法获取最新结果值

        var newResult = asyncSymbolOperateVal && asyncSymbolOperateVal() || 0; // 除数为0等错误发生时，中断计算，抛出错误弹窗

        if (newResult === 'Error') {
          this.currentResult = newResult; // 更新计算结果展示

          this.updateResultString(); // 展示错误弹窗

          this.switchErrorDialogShow(true);
          return;
        } // 更新计算过程展示


        this.updateProcessString("".concat(this.lastResult, " ").concat(symbol, " ").concat(this.currentResult)); // 修改上一次的结果值

        this.lastResult = lastResult; // 修改最新结果值

        this.currentResult = newResult; // 清除上一个计算的操作符对象

        this.lastSymbolObject = null; // 存储计算过程值

        this.handlerStorageProcessNum(lastResult); // 存储计算结果值

        this.handlerStorageResultNum(newResult); // 更新计算结果展示并动态调整计算结果的字号

        this.updateResultString(); // 抛出计算完成的回调方法

        this.computeFinish(Number(newResult));
        if (callback) callback();
      } // 点击计算结果值，将值复制到粘贴板

    }, {
      key: "handlerCopy",
      value: function handlerCopy() {
        // 抛出点击计算结果值的回调方法
        this.chooseResult(Number(this.currentResult || 0));
        if (!this.copyValue) return;
        var copyBox = document.createElement('input');
        document.body.append(copyBox);
        copyBox.value = this.currentResult || 0;
        copyBox.focus();
        copyBox.select();

        try {
          document.execCommand('copy');

          if (this.$notify) {
            this.$notify({
              title: '复制成功',
              type: 'success',
              message: '已将结果复制到粘贴板'
            });
          } else {
            this.showToast('已将结果复制到粘贴板');
          }
        } catch (error) {
          console.error("浏览器不支持document.execCommand('copy')");
        }

        copyBox.blur();
        document.body.removeChild(copyBox);
      } // 处理异常计算

    }, {
      key: "handlerError",
      value: function handlerError() {
        // 关闭错误弹窗
        this.switchErrorDialogShow(false);
        this.lastResult = '';
        this.currentResult = '0'; // 更新计算结果展示

        this.updateResultString(); // 清空上一次操作符对象

        this.lastSymbolObject = null;
      } // 删除记录列表的数据

    }, {
      key: "handlerDeleteHistory",
      value: function handlerDeleteHistory(origin, i) {
        this[origin].splice(i, 1); // 更新计算过程值和结果的列表

        this.updateProcessList();
      } // 创建dom

    }, {
      key: "createElement",
      value: function createElement() {
        if (!this.$el) {
          console.error('挂载实例的dom节点找不到，请确保传入正确的节点id或节点元素');
          return;
        }

        var ContainerString = "\n            <div class=\"calculator ".concat(this.showHistory && 'show-history' || '', "\">\n                <div class=\"calculator-container\">\n                    <div class=\"container-header\">\n                        <div class=\"header-process\">").concat(this.processString, "</div>\n                        <div class=\"header-result\">\n                            <div class=\"result-num\" title=\"\u70B9\u51FB\u590D\u5236\u7ED3\u679C\">").concat(this.currentResult, "</div>\n                        </div>\n                    </div>\n                    <div class=\"container-operation\">\n                        ").concat(this.operationSymbols.map(function (symbol, index) {
          return "\n                            <div class=\"symbol-key symbol symbol-".concat(symbol.class, "\" data-index=\"").concat(index, "\">\n                                ").concat(symbol.symbol ? "<span >".concat(symbol.symbol, "</span>") : "<div class=\"symbol-render\">".concat(symbol.render, "</div>"), "\n                            </div>\n                        ");
        }).join(''), "\n                    </div>\n                </div>\n                ").concat(this.showHistory ? '<div class="calculator-history"></div>' : '', "\n                <div class=\"error-dialog\" style=\"display:none;\">\n                    <div class=\"error-container\">\n                        <div class=\"error-content\">\u8BA1\u7B97\u503C\u8F93\u5165\u9519\u8BEF</div>\n                        <div class=\"error-btn\">\u91CD\u65B0\u8F93\u5165</div>\n                    </div>\n                </div>\n                <div class=\"info-toast\" style=\"display:none;\"></div>\n            </div>\n        ");
        this.$el.innerHTML = ContainerString;
        this.processStringDom = this.$el.querySelector('.header-process');
        this.resultStringDom = this.$el.querySelector('.result-num'); // 创建计算过程值和结果的列表

        this.updateProcessList();
        this.createEvents();
      } // 更新计算过程值和结果的列表

    }, {
      key: "updateProcessList",
      value: function updateProcessList() {
        var _this2 = this;

        var historyDom = this.$el.querySelector('.calculator-history');
        if (!historyDom) return;
        var valueListDomString = [{
          key: 'processNumbers',
          title: '计算过程值'
        }, {
          key: 'resultNumbers',
          title: '计算结果'
        }].map(function (_ref5) {
          var key = _ref5.key,
              title = _ref5.title;
          return "\n            <div class=\"process-number\">\n                <div class=\"history-title\">".concat(title, "</div>\n                <div class=\"history-number-box vertical-scroll\">\n                    ").concat(_this2[key].map(function (obj, index) {
            return "\n                        <li title=\"\u70B9\u51FB\u9009\u62E9 ".concat(obj.number, "\">\n                            <span class=\"h-num\">").concat(obj.number, "</span>\n                            <span class=\"h-mark\"\n                                title=\"\u5220\u9664\u8BE5\u6761\u8BB0\u5F55\"\n                                data-origin=\"").concat(key, "\"\n                                data-index=\"").concat(index, "\">+\n                            </span>\n                        </li>\n                    ");
          }).join(''), "\n                </div>\n            </div>\n        ");
        }).join('');
        historyDom.innerHTML = valueListDomString;
        var lists = historyDom.querySelectorAll('.history-number-box > li > .h-num');
        var deles = historyDom.querySelectorAll('.history-number-box > li > .h-mark');
        Array(lists.length).fill().forEach(function (_, i) {
          var _deles$i$dataset = deles[i].dataset,
              index = _deles$i$dataset.index,
              origin = _deles$i$dataset.origin;

          lists[i].onclick = function () {
            _this2.handlerChooseNum.call(_this2, _this2[origin][index]);
          };

          deles[i].onclick = function () {
            _this2.handlerDeleteHistory.call(_this2, origin, index);
          };
        });
      } // 更新计算过程展示

    }, {
      key: "updateProcessString",
      value: function updateProcessString(text) {
        this.processString = text;
        if (this.processStringDom) this.processStringDom.innerText = text;
      } // 更新计算结果展示

    }, {
      key: "updateResultString",
      value: function updateResultString() {
        var _this3 = this;

        if (!this.resultStringDom) return;
        this.resultStringDom.innerText = this.currentResult;
        setTimeout(function () {
          var resultDom = _this3.$el.querySelector('.header-result');

          var _resultDom$getBoundin = resultDom.getBoundingClientRect(),
              resultWidth = _resultDom$getBoundin.width;

          var _this3$resultStringDo = _this3.resultStringDom.getBoundingClientRect(),
              sonWidth = _this3$resultStringDo.width;

          var originScale = Number((_this3.resultStringDom.style.transform || '').replace(/[^0-9.]/ig, '') || '1');
          var scale = resultWidth / (sonWidth / originScale + 50);
          _this3.resultStringDom.style.transform = "scale(".concat(scale < 1 ? scale : 1, ")");
        }, 30);
      } // 创建相关点击事件

    }, {
      key: "createEvents",
      value: function createEvents() {
        var _this4 = this;

        // 点击结果复制内容到粘贴板
        this.resultStringDom.onclick = this.handlerCopy.bind(this); // 点击重新输入按钮关闭错误弹窗

        var errorBtn = this.$el.querySelector('.error-btn');
        errorBtn.onclick = this.handlerError.bind(this); // 按键逻辑

        var keys = this.$el.querySelectorAll('.symbol-key');
        Array(keys.length).fill().forEach(function (_, i) {
          keys[i].onclick = function () {
            var index = keys[i].dataset.index;

            _this4.handlerTouchKey.call(_this4, _this4.operationSymbols[index]);
          };
        });
      } // 错误弹窗控制

    }, {
      key: "switchErrorDialogShow",
      value: function switchErrorDialogShow(show) {
        var errorDialog = this.$el.querySelector('.error-dialog');
        errorDialog.style.display = show && 'flex' || 'none';
      } // toast提示控制

    }, {
      key: "showToast",
      value: function showToast(text) {
        var infoToast = this.$el.querySelector('.info-toast');
        infoToast.innerText = text;
        infoToast.style.display = 'block';
        setTimeout(function () {
          infoToast.style.display = 'none';
        }, 1000);
      } // 初始化

    }, {
      key: "init",
      value: function init() {
        this.createElement();
      } // 销毁dom

    }, {
      key: "destroy",
      value: function destroy() {
        Object.assign(this, {
          processNumbers: [],
          resultNumbers: [],
          isComputing: false,
          isFinishComputed: false,
          isShowHistory: false,
          lastSymbolObject: null,
          lastResult: '',
          currentResult: '0',
          processString: ''
        });
        this.$el.innerHTML = '';
      }
    }]);
    return Calculator;
  }(); // export default Calculator;

});